debug = false;

acqName = "test_z_nonuniform";

rootDirName = "//ds.leeds.ac.uk/student/student13/pyara";

int numTimePoints = 1000;

int intervalSec = 1;

int numZStackBursts = 50;

Double[] relativePositionsUm = { 0, 0.1, 3};

int delayForPiezoMs = 30;

import mmcorej.DoubleVector;    // For movement vector.
import java.lang.System;        // For calculating interval.

// Calculate the Z-position movements.
movementsUm = new DoubleVector();
for (int i = 1; i < relativePositionsUm.length; i++) {
   movementsUm.add(relativePositionsUm[i]
                   - relativePositionsUm[i-1]);
}

movementsUm.add(-1 * relativePositionsUm[relativePositionsUm.length - 1]);

// Setup experiment.
gui.closeAllAcquisitions(); 
gui.openAcquisition(acqName,
                    rootDirName,
                    numTimePoints
                    * numZStackBursts,          // Number of frames.
                    1,                          // Number of channels.
                    relativePositionsUm.length, // Number of slices.
                    true,                       // Show?
                    false);                     // Save?

// Experiment loop.
print("** Experiment started");
int timePoint = 0;
for (int i = 0; i < numTimePoints; i++) {
   print("Capturing loop " + (i + 1) + " of " + numTimePoints);
   loopStartTime = System.currentTimeMillis();
   for (int j = 0; j < numZStackBursts; j++) {
      for (int k = 0; k < movementsUm.size(); k++) {
         if (debug)
            print("Z-position " + k + " at the start of timepoint " + timePoint + " is " + mmc.getPosition(mmc.getFocusDevice()) + " um");
         // Capture single image.
         gui.snapAndAddImage(acqName,
                             timePoint,
                             0,   // Channel
                             k,   // Z
                             0);  // XY-Position

         // Set channel contrast based on first frame.
         if (frame == 0)
            gui.setContrastBasedOnFrame(acqName, 0, 0);
         // Move Z to next position.
         mmc.setRelativePosition(mmc.getFocusDevice(),
                                 movementsUm.get(k));
         gui.sleep(delayForPiezoMs);
      }
      timePoint++;
   }
   if (i < numTimePoints - 1) {
      itTook = System.currentTimeMillis() - loopStartTime;
      remainingMs = intervalSec * 1000 - itTook;
      if (remainingMs > 0)
         print("Waiting " + ((Double)remainingMs / 1000) + " sec until next loop");
      gui.sleep(remainingMs);
   }
}
}
print("** Finished experiment.");
